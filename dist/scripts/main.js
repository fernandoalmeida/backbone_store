var ItemModel=Backbone.Model.extend({initialize:function(){try{this.set("formatPrice","$ "+this.attributes.price.toFixed(2))}catch(a){this.set("formatPrice","$ 0.00")}},defaults:{id:"",title:"unavailable",publisher:"unavailable",date:"unavailable",pages:0,price:0,image:"http://placehold.it/240x280",description:""}}),ItemsCollection=Backbone.Collection.extend({comparator:function(a,b){return a.get("date")<b.get("date")?1:-1},model:ItemModel,url:"api/items.json"}),CartItemsCollection=Backbone.Collection.extend({comparator:"title",model:ItemModel}),HomeView=Backbone.View.extend({template:'<div class="home">	  <div class="jumbotron">            <h1>Backbone Store</h1>            <p class="lead">A simple project for getting start with Backbone.js</p>            <p><a class="btn btn-lg btn-success" href="#/store">Show me the Store!</a></p>	  </div>	  <div class="row marketing">            <div class="col-lg-6">              <h4>HTML5 Boilerplate</h4>              <p>HTML5 Boilerplate is a professional front-end template for building fast, robust, and adaptable web apps or sites.</p>            </div>            <div class="col-lg-6">              <h4>Bootstrap</h4>              <p>Sleek, intuitive, and powerful mobile first front-end framework for faster and easier web development.</p>            </div>	  </div>	</div>',render:function(){return this.$el.html(Mustache.render(this.template)),this}}),ListView=Backbone.View.extend({initialize:function(){this.collection=new ItemsCollection,this.listenTo(this.collection,"reset",this.render),this.collection.fetch()},render:function(){return this.$el.html(Mustache.render(this.template,this.collection)),this},template:'<div class="list">       <div class="panel panel-default">         <div class="panel-body">           <form role="form">             <div class="col-md-3">               <div class="form-group">                 <label for="order_by">Order by</label>                 <select class="form-control" name="order_by" id="order_by"><option value="date">Date</option></select>               </div>             </div>           </form>         </div>       </div>       <div class="row">         {{#models}}         <div class="col-md-3 item">           <a href="#/store/{{attributes.id}}" class="thumbnail">             <img src="{{attributes.image}}" alt="{{attributes.name}}">           </a>         </div>         {{/models}}      </div>     </div>'}),ItemView=Backbone.View.extend({render:function(){return this.$el.html(Mustache.render(this.template,this.model.attributes)),this},template:'	<div class="item details">	  <div class="row">	    <div class="col-md-4 thumbnail">	      <img src="{{image}}" alt="...">	    </div>	    <div class="col-md-8">	      <div class="col-md-12">		<h2>{{title}}</h2>		<strong>ISBN:</strong> <span>{{id}}</span><br>		<strong>Publisher:</strong> <span>{{publisher}}</span><br>		<strong>Date:</strong> <span>{{date}}</span><br>		<strong>Pages:</strong> <span>{{pages}}</span><br>	      </div>	      <div class="col-md-12">		<h2>Price: {{formatPrice}}</h2>	      </div>	      <div>		<form method="GET" action="#cart/{{id}}/add">		  <div class="col-md-3">		    <button type="submit" class="btn btn-success">Add to cart</button>		  </div>		</form>	      </div>	    </div>	  </div>	  <div class="row">	    <div class="col-md-12">	      <p>{{description}}</p>	    </div>	  </div>	</div>'}),CartView=Backbone.View.extend({initialize:function(){return this.collection=new CartItemsCollection,this.listenTo(this.collection,"reset",this.render),this.listenTo(this.collection,"add",this.render),this},render:function(){return this.$el.html(Mustache.render(this.template,this.collection)),this},template:'<table class="cart table table-bordered table-striped">		  <thead>			  <tr>				<th>Image</th>				<th>Title</th>				<th>Quantity</th>				<th>Unit Price</th>				<th>Total</th>			  </tr>			</thead>			<tbody>                          {{#models}}	    		    <tr class="item">				<td class="image"><a href="#store/{{attributes.id}}"><img src="{{attributes.image}}" alt="{{attributes.title}} ({{attributes.id}})"></a></td>				<td class="title">{{attributes.title}}</td>				<td class="quantity">{{attributes.quantity}}</td>				<td class="price">{{attributes.formatPrice}}</td>				<td class="price">{{attributes.formatTotal}}</td>                            </tr>	                  {{/models}}			  <tr>				<td>&nbsp;</td>				<td>&nbsp;</td>				<td>&nbsp;</td>				<td>&nbsp;</td>				<td><strong></strong></td>			  </tr>			</tbody>		  </table>'}),BackboneStore=Backbone.Router.extend({initialize:function(){this.homeView=new HomeView,this.listView=new ListView,this.itemModel=new ItemModel,this.itemView=new ItemView({model:this.itemModel}),this.cartView=new CartView},routes:{"":"home",store:"list","store/:item":"item",cart:"cart","cart/:item/add":"add"},home:function(){$(".main").html(this.homeView.render().el)},list:function(){$(".main").html(this.listView.render().el)},item:function(a){this.itemView.model=this.listView.collection.get(a)||this.itemModel,$(".main").html(this.itemView.render().el)},cart:function(){$(".main").html(this.cartView.render().el)},add:function(a){var b=this.cartView.collection.get(a)||this.listView.collection.get(a);b&&(void 0==this.cartView.collection.get(a)?(b.set("quantity",1),b.set("formatTotal",b.get("formatPrice"))):(b.set("quantity",b.get("quantity")+1),b.set("formatTotal","$ "+(b.get("quantity")*b.get("price")).toFixed(2))),this.cartView.collection.add(b)),$(".main").html(this.cartView.render().el)}}),app=new BackboneStore;$(function(){Backbone.history.start()});